
import ukcensusapi.Nomisweb as Api
import sys

class Query:

  def __init__(self, api):
    self.api = api

  def table(self):

    print("Nomisweb census data interactive query builder")
    print("See README.md for details on how to use this package")

    table = input("Census table: ")

    # TODO allow countrywide coverage and LA resolution
    coverage = input("Coverage\nE/EW/GB/UK or LA name(s), comma separated: ")

    resolution = input("Resolution (LA/MSOA/LSOA/OA): ")

    if resolution == "LA":
      resolution = Api.Nomisweb.LAD
    elif resolution == "MSOA":
      resolution = Api.Nomisweb.MSOA
    elif resolution == "LSOA":
      resolution = Api.Nomisweb.LSOA
    elif resolution == "OA":
      resolution = Api.Nomisweb.OA
    else:
      print("Invalid resolution")
      sys.exit()

    if coverage == "E":
      coverageCodes = [NomiswebApi.England]
    elif coverage == "EW":
      coverageCodes = [NomiswebApi.EnglandWales]
    elif coverage == "GB":
      coverageCodes = [NomiswebApi.GB]
    elif coverage == "UK":
      coverageCodes = [NomiswebApi.UK]
    else:
      coverageCodes = self.api.getLADCodes(coverage.split(","))

    areaCodes = self.api.geoCodes(coverageCodes, resolution)

    #print(areaCodes)

    queryParams = {} #OrderedDict()
    queryParams["date"] = "latest"
    queryParams["geography"] =  areaCodes 
    queryParams["select"] = "GEOGRAPHY_CODE," 

    meta = self.api.getMetadata(table)
    print(meta["description"])
    for field in meta["fields"]:
      if field != "GEOGRAPHY" and field != "FREQ":
        print(field + ":")
        for category in meta["fields"][field]:
          print("  " + str(category) + " (" + meta["fields"][field][category] + ")")
        categories = input("Select categories (default 0): ")
        include = True
        if categories == "":
          include = input("include in output (y/n, default=n)? ") == "y"
          categories = "0"
        queryParams[field] = categories
        if field != "MEASURES" and include:
          queryParams["select"] += field + ","
          
    queryParams["select"] += "OBS_VALUE"

    print("\n\nGetting data...")

    # Fetch (and cache) data
    data = self.api.getData(meta["nomis_table"], queryParams)

    # Remove API key in example code (lest it be accidentally committed)
    del(queryParams["uid"])

    print("\nWriting python code to " + table + ".py") 
    with open(table + ".py", "w") as pyFile:
      pyFile.write("# " + meta["description"])
      pyFile.write("\n\n# Code autogenerated by NomiswebApi")
      pyFile.write("\n\n# This code requires an API key, see the README.md for details")
      pyFile.write("\n\n# Query url:\n# " + self.api.getUrl(meta["nomis_table"], queryParams)) 
      pyFile.write("\n\nimport ukcensusapi.Nomisweb as Api")
      pyFile.write("\n\napi = Api.Nomisweb(\"./\")")
      pyFile.write("\ntable = \"" + meta["nomis_table"] + "\"") 
      pyFile.write("\nqueryParams = {}")
      for key in queryParams:
        pyFile.write("\nqueryParams[\""+key+"\"] = \""+queryParams[key]+"\"")
      pyFile.write("\n" + table + " = api.getData(table, queryParams)\n")

    print("\nWriting R code to " + table + ".R") 
    with open(table + ".R", "w") as rFile:
      rFile.write("# " + meta["description"])
      rFile.write("\n\n# Code autogenerated by NomiswebApi")
      rFile.write("\n\n# This code requires an API key, see the README.md for details")
      rFile.write("\n\nlibrary(\"UKCensusAPI\")")
      rFile.write("\ncacheDir = \"" + self.api.cacheDir + "\"")
      rFile.write("\nqueryUrl = \"" + self.api.getUrl(meta["nomis_table"], queryParams) + "\"")
      rFile.write("\n"+table + " = UKCensusAPI::getData(queryUrl, cacheDir)\n")

  # returns a geography string that can be inserted into an existing query
  def getGeographyFromNames(self, coverage, resolution):
  
    # Convert the coverage area into nomis codes
    coverageCodes = self.api.getLADCodes(coverage)
    return self.getGeographyFromCodes(coverageCodes, resolution)
    
  def getGeographyFromCodes(self, coverage, resolution):
    return self.api.geoCodes(coverage, resolution)

