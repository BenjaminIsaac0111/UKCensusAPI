#!/usr/bin/python3

from NomiswebApi import NomiswebApi
import sys

api = NomiswebApi("../data/", "../persistent_data/laMapping.csv")

print("Nomisweb census data interactive query builder")
print("See README.md for details on how to use this package")

table = input("Census table: ")

# TODO allow countrywide coverage and LA resolution
coverage = input("Coverage\nE/EW/GB/UK or LA name(s), comma separated: ")

resolution = input("Resolution (LA/MSOA/LSOA/OA): ")

if resolution == "LA":
  resolution = NomiswebApi.LAD
elif resolution == "MSOA":
  resolution = NomiswebApi.MSOA
elif resolution == "LSOA":
  resolution = NomiswebApi.LSOA
elif resolution == "OA":
  resolution = NomiswebApi.OA
else:
  print("Invalid resolution")
  sys.exit()

if coverage == "E":
  coverageCodes = [NomiswebApi.England]
elif coverage == "EW":
  coverageCodes = [NomiswebApi.EnglandWales]
elif coverage == "GB":
  coverageCodes = [NomiswebApi.GB]
elif coverage == "UK":
  coverageCodes = [NomiswebApi.UK]
else:
  coverageCodes = api.readLADCodes(coverage.split(","))

areaCodes = api.geoCodes(coverageCodes, resolution)

#print(areaCodes)

queryParams = {} #OrderedDict()
queryParams["date"] = "latest"
queryParams["geography"] =  areaCodes 
queryParams["select"] = "GEOGRAPHY_CODE," 

meta = api.getMetadata(table)
print(meta["description"])
for field in meta["fields"]:
  if field != "GEOGRAPHY" and field != "FREQ":
    print(field + ":")
    for category in meta["fields"][field]:
      print("  " + str(category) + " (" + meta["fields"][field][category] + ")")
    categories = input("Select categories (default 0): ")
    include = True
    if categories == "":
      include = input("include in output (y/n, default=n)? ") == "y"
      categories = "0"
    queryParams[field] = categories
    if field != "MEASURES" and include:
      queryParams["select"] += field + ","
      
queryParams["select"] += "OBS_VALUE"

print("\n\nGetting data...")

# Fetch (and cache) data
data = api.getData(meta["nomis_table"], queryParams)

# Remove API key in example code (lest it be accidentally committed)
del(queryParams["uid"])

print("\nWriting python code to " + table + ".py") 
with open(table + ".py", "w") as pyFile:
  pyFile.write("# " + meta["description"])
  pyFile.write("\n\n# Code autogenerated by NomiswebApi")
  pyFile.write("\n\n# This code requires an API key, see the README.md for details")
  pyFile.write("\n\n# Query url:\n# " + api.getUrl(meta["nomis_table"], queryParams)) 
  pyFile.write("\n\nfrom NomiswebApi import NomiswebApi")
  pyFile.write("\n\napi = NomiswebApi(\"../data/\", \"../persistent_data/laMapping.csv\")")
  pyFile.write("\ntable = \"" + meta["nomis_table"] + "\"") 
  pyFile.write("\nqueryParams = {}")
  for key in queryParams:
    pyFile.write("\nqueryParams[\""+key+"\"] = \""+queryParams[key]+"\"")
  pyFile.write("\n" + table + " = api.getData(table, queryParams)\n")

print("\nWriting R code to " + table + ".R") 
with open(table + ".R", "w") as rFile:
  rFile.write("# " + meta["description"])
  rFile.write("\n\n# Code autogenerated by NomiswebApi")
  rFile.write("\n\n# This code requires an API key, see the README.md for details")
  rFile.write("\n\nsource(\"../R/src/NomiswebApi.R\")")
  rFile.write("\ncacheDir = \"" + api.cacheDir + "\"")
  rFile.write("\nqueryUrl = \"" + api.getUrl(meta["nomis_table"], queryParams) + "\"")
  rFile.write("\n"+table + " = NomiswebApi.getData(queryUrl, cacheDir)\n")


